# Technical Requirements Document: ClearForge Website Updates

**Project:** ClearForge Website Launch & Continuum Auto-Detection  
**Domain:** clearforgetech.com (GoDaddy)  
**Repository:** cloudforge-website  
**Target Completion:** Phase 1: 4 hours | Phase 2: 24 hours  
**Date:** October 15, 2025

---

## Executive Summary

This TRD addresses critical launch blockers and implements the Continuum auto-detection system that reads project data from XynergyOS Firestore. The website will automatically generate pages for projects created in XynergyOS, eliminating manual page creation.

---

## Phase 1: Launch Blockers (4 hours)

### 1.1 Beta Form Schema Alignment

**Problem:** Form field names in `BetaApplicationForm.tsx` don't match API validation schema in `/app/api/beta/route.ts`

**Required Changes:**

**File:** `/components/forms/BetaApplicationForm.tsx`

Update field names to match API schema:
```typescript
// Current → Required
businessName → company_name
name → contact_name
// Verify all fields match BetaApplicationSchema in /app/api/beta/route.ts
```

**Validation:** Form submission must pass Zod validation without errors.

---

### 1.2 Port Configuration Fix

**Problem:** Port mismatch between Cloud Run config (3000) and Dockerfile (8080)

**Required Changes:**

**File:** `/cloudbuild.yaml` (line 47)

```yaml
- '--port'
- '8080'  # Changed from '3000'
```

**Validation:** Cloud Run service must receive traffic on port 8080.

---

### 1.3 Gateway Environment Configuration

**Problem:** Intelligence Gateway URL and API key not configured in Secret Manager

**Required Actions:**

1. **Create Secrets in GCP Secret Manager:**
```bash
gcloud secrets create gateway-url --data-file=- 
# Input: https://intelligence-gateway-[hash]-uc.a.run.app

gcloud secrets create gateway-api-key --data-file=-
# Input: [actual-api-key]

gcloud secrets create ga-measurement-id --data-file=-
# Input: G-XXXXXXXXXX
```

2. **Verify secrets referenced in cloudbuild.yaml (line 51)**

**Validation:** Gateway client must successfully connect to Intelligence Gateway.

---

### 1.4 Public Access Configuration

**Problem:** Cloud Run service requires authentication

**Required Actions:**

```bash
gcloud run services add-iam-policy-binding clearforge-website \
  --region=us-central1 \
  --member="allUsers" \
  --role="roles/run.invoker" \
  --project=xynergy-dev-1757909467
```

**Validation:** Website accessible at public URL without authentication.

---

### 1.5 Contact Form Component

**Problem:** Contact page shows only beta form, needs dedicated contact form for 6 inquiry types

**Required Changes:**

**File:** `/components/forms/ContactForm.tsx` (NEW)

**Purpose:** Universal contact form handling all inquiry types

**Props:**
```typescript
interface ContactFormProps {
  defaultInquiryType?: 'partnership' | 'consulting' | 'general' | 'media' | 'support' | 'beta';
  showInquiryTypeSelector?: boolean; // Default: true
}
```

**Form Fields:**

1. **Inquiry Type** (dropdown)
   - Label: "What can we help with?"
   - Options:
     - Partnership Opportunities
     - Consulting Services
     - General Inquiry
     - Media & Press
     - Support Question
     - Beta Program Application
   - Required: Yes
   - Behavior: If defaultInquiryType provided and showInquiryTypeSelector=false, hide field

2. **Contact Name** (text input)
   - Label: "Your Name"
   - Placeholder: "John Smith"
   - Required: Yes
   - Validation: Min 2 characters

3. **Email** (email input)
   - Label: "Email Address"
   - Placeholder: "john@company.com"
   - Required: Yes
   - Validation: Valid email format

4. **Company Name** (text input)
   - Label: "Company Name"
   - Placeholder: "Acme Inc."
   - Required: No
   - Display: Show for Partnership and Consulting types, optional for others

5. **Phone** (tel input)
   - Label: "Phone Number (optional)"
   - Placeholder: "+1 (555) 123-4567"
   - Required: No
   - Validation: Valid phone format if provided

6. **Industry** (dropdown)
   - Label: "Industry"
   - Options: [Same as BetaApplicationForm - Professional Services, Technology, Healthcare, Finance, etc.]
   - Required: For Partnership and Consulting
   - Display: Show for Partnership and Consulting types

7. **Message** (textarea)
   - Label: Dynamic based on inquiry type:
     - Partnership: "Tell us about your partnership idea"
     - Consulting: "Describe your consulting needs"
     - General: "How can we help?"
     - Media: "Your inquiry"
     - Support: "What do you need help with?"
     - Beta: "Why are you interested in our beta program?"
   - Placeholder: Dynamic based on inquiry type
   - Required: Yes
   - Validation: Min 20 characters, max 2000 characters
   - Rows: 6

8. **Preferred Contact Method** (radio buttons)
   - Label: "Preferred Contact Method"
   - Options: Email, Phone, Either
   - Default: Email
   - Required: Yes

9. **Timeline** (dropdown)
   - Label: "When are you looking to get started?"
   - Options:
     - Immediately
     - Within 1 month
     - 1-3 months
     - 3-6 months
     - Just exploring
   - Required: For Partnership and Consulting
   - Display: Show for Partnership and Consulting types

**Form Validation:**

Client-side validation (Zod schema):
```typescript
const ContactFormSchema = z.object({
  inquiryType: z.enum(['partnership', 'consulting', 'general', 'media', 'support', 'beta']),
  contactName: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  companyName: z.string().optional(),
  phone: z.string().optional(),
  industry: z.string().optional(),
  message: z.string().min(20, 'Message must be at least 20 characters').max(2000),
  preferredContactMethod: z.enum(['email', 'phone', 'either']),
  timeline: z.string().optional(),
});
```

**Form States:**

1. **Initial State**
   - All fields empty (except defaults)
   - Submit button enabled
   - No error messages

2. **Validating State**
   - Real-time validation on blur
   - Error messages appear below invalid fields
   - Submit button remains enabled

3. **Submitting State**
   - Submit button shows loading spinner
   - Button text: "Sending..."
   - Form fields disabled
   - Prevent multiple submissions

4. **Success State**
   - Hide form
   - Show success message:
     - Heading: "Thanks for reaching out!"
     - Message: "We've received your {inquiry type} inquiry. We'll get back to you within 24 hours at {email}."
     - Icon: Checkmark (green)
   - Option to submit another inquiry (resets form)

5. **Error State**
   - Show error message above form:
     - "Something went wrong. Please try again or email us directly at contact@clearforgetech.com"
   - Form fields remain filled
   - Allow retry
   - Log error details for debugging

**API Integration:**

Submit to: `/app/api/contact/route.ts` (existing)

Request payload:
```typescript
{
  inquiry_type: string,
  contact_name: string,
  email: string,
  company_name?: string,
  phone?: string,
  industry?: string,
  message: string,
  preferred_contact_method: string,
  timeline?: string
}
```

**Match existing API schema** - verify field names match ContactSchema in `/app/api/contact/route.ts`

**Visual Design:**
- Clean, modern form layout
- Single column on mobile, can expand to 2 columns on desktop for shorter fields
- Consistent with BetaApplicationForm styling
- Clear labels and placeholder text
- Error messages in red below fields
- Success state with green checkmark
- Loading spinner on submit button
- Form width: max 600px, centered

**Accessibility:**
- Proper label associations
- Required field indicators (*)
- ARIA labels for error messages
- Focus management on submission
- Keyboard navigation support
- Screen reader friendly error messages

---

**File:** `/app/contact/page.tsx`

**Purpose:** Contact page with multiple inquiry paths

**Required Changes:**

1. **Page Structure:**

**Hero Section:**
- Heading: "Get In Touch"
- Description: "Whether you're interested in partnership, consulting, or just want to say hello, we'd love to hear from you."

**Contact Options Section:**
- Display 6 contact option cards (2 columns on desktop, 1 on mobile)
- Each card:
  - Icon
  - Title
  - Description
  - "Get Started" button
  
**Cards:**

1. **Beta Program Application**
   - Icon: Rocket
   - Title: "Join Our Beta Program"
   - Description: "Get early access to our platform and shape the future"
   - Button: Opens BetaApplicationForm modal or navigates to /beta
   
2. **Partnership Opportunities**
   - Icon: Handshake
   - Title: "Explore Partnerships"
   - Description: "Let's build something amazing together"
   - Button: Opens ContactForm with inquiryType='partnership'
   
3. **Consulting Services**
   - Icon: Users
   - Title: "Consulting Services"
   - Description: "Transform your business with expert guidance"
   - Button: Opens ContactForm with inquiryType='consulting'
   
4. **General Inquiry**
   - Icon: Message
   - Title: "General Inquiry"
   - Description: "Questions, feedback, or just want to chat?"
   - Button: Opens ContactForm with inquiryType='general'
   
5. **Media & Press**
   - Icon: Newspaper
   - Title: "Media & Press"
   - Description: "Press inquiries and media requests"
   - Button: Opens ContactForm with inquiryType='media'
   
6. **Direct Email**
   - Icon: Mail
   - Title: "Email Us Directly"
   - Description: "Prefer email? Send us a message anytime"
   - Link: mailto:contact@clearforgetech.com

**Form Display Logic:**

Two implementation options:

**Option A: Modal/Dialog**
- Click card button → Opens ContactForm in modal overlay
- Modal has close button
- Backdrop click closes modal
- Form pre-filled with inquiry type
- Success/error states within modal

**Option B: Inline Form**
- Click card button → Scrolls to ContactForm below cards
- Form appears with selected inquiry type
- Clear heading: "Contact Us - {Inquiry Type}"
- Option to change inquiry type via dropdown

**Recommendation:** Option B (Inline Form) - simpler implementation, better mobile UX

**Additional Content Sections:**

**Other Ways To Reach Us:**
- Office hours: "Monday-Friday, 9AM-5PM EST"
- Response time: "We typically respond within 24 hours"
- Support: "For urgent issues, email support@clearforgetech.com"

**Social Links:**
- LinkedIn, Twitter, GitHub (if applicable)
- Icons with links

**SEO Metadata:**
```typescript
export const metadata: Metadata = {
  title: 'Contact Us | ClearForge',
  description: 'Get in touch with ClearForge for partnerships, consulting, beta access, or general inquiries. We typically respond within 24 hours.',
};
```

**Validation:** 
- All 6 inquiry types work correctly
- Form validates properly
- Submissions reach /api/contact successfully
- Success/error states display correctly
- Mobile responsive
- Accessible via keyboard and screen readers

---

### 1.6 Domain Configuration

**Problem:** Domain clearforgetech.com needs to point to Cloud Run service

**Required Actions:**

**In GoDaddy DNS:**
1. Add CNAME record:
   - Name: `www`
   - Value: `ghs.googlehosted.com`
   - TTL: 600

2. Add A records for apex domain:
   - Name: `@`
   - Value: Cloud Run IP addresses (obtain from GCP)

**In GCP Cloud Run:**
```bash
gcloud run domain-mappings create \
  --service clearforge-website \
  --domain clearforgetech.com \
  --region us-central1

gcloud run domain-mappings create \
  --service clearforge-website \
  --domain www.clearforgetech.com \
  --region us-central1
```

**Update Environment Variables:**
```bash
NEXT_PUBLIC_APP_URL=https://www.clearforgetech.com
```

**Validation:** 
- clearforgetech.com redirects to www.clearforgetech.com
- SSL certificate auto-provisioned
- Website loads at primary domain

---

## Phase 2: Continuum Auto-Detection System (24 hours)

### 2.1 Firestore Integration

**Objective:** Enable read-only access to XynergyOS Firestore database

**Required Changes:**

**File:** `/lib/firestore-client.ts` (NEW)

Create singleton Firestore client with the following methods:

```typescript
class FirestoreClient {
  // Initialize with service account credentials
  
  async getActiveProjects(options?: {
    limit?: number;
    orderBy?: string;
    displayOnly?: boolean;
  }): Promise<Project[]>
  // Returns active projects, optionally filtered by displayOnContinuum
  // Default limit: 5, orderBy: displayOrder ASC
  
  async getProjectBySlug(slug: string): Promise<Project | null>
  // Returns single project by slug, null if not found or not active
  
  async getProjectLearnings(projectId: string, options?: {
    limit?: number;
    orderBy?: string;
  }): Promise<Learning[]>
  // Returns learnings from /projects/{projectId}/learnings
  // Default limit: 10, orderBy: capturedAt DESC
  
  async getProjectMetrics(projectId: string): Promise<ProjectMetrics>
  // Returns metrics object from project document
  
  async healthCheck(): Promise<boolean>
  // Verifies Firestore connection
}
```

**Error Handling Requirements:**
- Wrap all queries in try/catch
- Log errors to console with context
- Return empty arrays/null on failures (don't crash)
- Implement 10-second query timeout
- Retry failed queries max 2 times with 1-second delay

**Caching Strategy:**
- Cache query results in memory for 5 minutes
- Reduces Firestore reads
- Cache key based on query parameters
- Clear cache on error

**File:** `.env.example`

Add required variables:
```env
# Firestore Configuration
FIRESTORE_PROJECT_ID=xynergy-dev-1757909467
GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json
FIRESTORE_DATABASE_ID=(default)
```

**GCP Setup:**
1. Create service account: `clearforge-website-firestore-reader`
2. Grant role: `roles/datastore.viewer` on xynergy-dev-1757909467
3. Download JSON key
4. Create secret in Secret Manager:
   ```bash
   gcloud secrets create firestore-credentials \
     --data-file=service-account-key.json \
     --project=xynergy-dev-1757909467
   ```
5. Grant Cloud Run service account access to secret:
   ```bash
   gcloud secrets add-iam-policy-binding firestore-credentials \
     --member="serviceAccount:PROJECT_NUMBER-compute@developer.gserviceaccount.com" \
     --role="roles/secretmanager.secretAccessor"
   ```
6. Mount secret in Cloud Run (cloudbuild.yaml):
   ```yaml
   --set-secrets=/secrets/firestore-credentials.json=firestore-credentials:latest
   ```

**Validation:** 
- Successfully connect to Firestore
- Query projects collection returns data
- Error handling works (test with invalid credentials)
- Cache reduces duplicate queries

---

### 2.2 Firestore Schema Definition

**Required Schema in XynergyOS:**

**Collection:** `/projects/{projectId}`
```typescript
interface Project {
  id: string;
  name: string;
  slug: string; // URL-safe, used in /continuum/{slug}
  phase: string; // "Phase 0 - Research", "Phase 1 - Launching", etc.
  status: 'active' | 'paused' | 'completed' | 'archived';
  health: 'healthy' | 'at-risk' | 'blocked';
  description: string; // Short summary
  vision: string; // Long-form vision text
  currentFocus?: string;
  displayOnContinuum: boolean; // Show on /continuum landing?
  displayOrder: number; // Position in top 5 (1-5)
  launchDate?: string; // ISO date
  metrics: {
    partners?: number;
    revenue?: number;
    retentionRate?: number;
  };
  createdAt: Timestamp;
  updatedAt: Timestamp;
  lastActivityAt?: Timestamp;
}
```

**Collection:** `/projects/{projectId}/learnings/{learningId}`
```typescript
interface Learning {
  id: string;
  projectId: string;
  content: string;
  capturedAt: Timestamp;
  tags?: string[];
  type: 'learning' | 'insight' | 'blocker' | 'win';
}
```

---

### 2.3 Dynamic Continuum Routes

**Required Changes:**

**File:** `/app/continuum/[slug]/page.tsx` (NEW)

**Purpose:** Dynamic page that renders any project created in XynergyOS Firestore

**Implementation Requirements:**

1. **Static Generation with ISR:**
```typescript
export const revalidate = 900; // 15 minutes

export async function generateStaticParams() {
  const projects = await firestoreClient.getActiveProjects({ displayOnly: false });
  return projects.map((project) => ({ slug: project.slug }));
}
```

2. **generateMetadata for SEO:**
```typescript
export async function generateMetadata({ params }): Promise<Metadata> {
  const project = await firestoreClient.getProjectBySlug(params.slug);
  
  if (!project) {
    return { title: 'Project Not Found' };
  }
  
  return {
    title: `${project.name} | The Continuum | ClearForge`,
    description: project.description,
    openGraph: {
      title: project.name,
      description: project.description,
      type: 'website',
    },
  };
}
```

3. **Page Component Structure:**

**Header Section:**
- Breadcrumb: Home > The Continuum > {Project Name}
- Project name (h1)
- Current phase badge (using ProjectPhase component)
- Health indicator (green/yellow/red dot)
- Last updated timestamp (project.updatedAt)

**The Vision Section:**
- Heading: "The Vision"
- Content: {project.vision} (from Firestore)
- Rendered as formatted text (preserve line breaks)
- Typography: prose class for readability

**Current Focus Section:**
- Heading: "Where We Are Now"
- Content: {project.currentFocus} (from Firestore)
- Only displays if currentFocus exists
- Include current phase description
- Display launch date if available

**Live Metrics Section:**
- Heading: "By The Numbers"
- Component: <LiveMetrics metrics={project.metrics} />
- Grid layout: 3 columns on desktop, 1 on mobile
- Only displays if metrics exist

**What We're Learning Section:**
- Heading: "What We're Learning"
- Component: <LearningsFeed learnings={learnings} />
- Displays most recent 10 learnings
- If no learnings: "Learnings will appear as we progress"
- Timeline/chronological display

**Transparency Section:**
- Heading: "Full Transparency"
- Description: "See all our data, decisions, and progress in real-time"
- Component: <TransparencyLink projectId={project.id} />
- Button/link to future dashboard view

**Application/Get Involved Section (Conditional):**
- Only displays if project.phase includes "Launching" or "Beta"
- Heading: "Get Involved"
- Description from Firestore field: project.callToAction
- Link to application page if exists
- Default: Link to /contact with project pre-selected

4. **Error Handling:**
- If slug not found in Firestore: return notFound() (404 page)
- If project.status !== 'active': return notFound()
- If Firestore query fails: show error boundary with retry option
- If partial data missing: gracefully hide sections

5. **Loading States:**
- Implement loading.tsx for Suspense boundary
- Skeleton loaders for metrics and learnings
- Show project name immediately, lazy load data

**Validation:** 
- Page renders for all active projects
- 404 for invalid/inactive projects
- All sections display correctly with real data
- Missing optional fields handled gracefully
- Updates within 15 minutes of Firestore changes
- SEO metadata correct
- Mobile responsive

---

### 2.4 Continuum Landing Page

**Required Changes:**

**File:** `/app/continuum/page.tsx`

**Purpose:** Overview page explaining The Continuum concept and displaying top 5 active projects

**Implementation Requirements:**

1. **Data Fetching:**
```typescript
export const revalidate = 900; // 15 minutes ISR

async function ContinuumPage() {
  const projects = await firestoreClient.getActiveProjects({
    limit: 5,
    orderBy: 'displayOrder',
    displayOnly: true // Only projects where displayOnContinuum = true
  });
  
  // Render page
}
```

2. **Page Structure:**

**Hero Section:**
- Heading: "The Continuum" (h1)
- Subheading: "Our Focus, Evolved"
- Description paragraph (3-4 sentences):
  - Explain The Continuum concept
  - Why we work this way (focus, transparency, adaptation)
  - How projects rotate as priorities evolve
  - Link to /mission/transparency for more on our approach

**The Concept Section:**
- Heading: "How It Works"
- 3-column grid (mobile: stack):
  
  Column 1: "Top 5 Focus"
  - Icon: Target/focus icon
  - Text: "We maintain intense focus on 5 projects maximum. No distractions, no dilution."
  
  Column 2: "Radical Transparency"
  - Icon: Eye/visibility icon
  - Text: "Every project shows real-time progress, metrics, and learnings. No hiding, no spin."
  
  Column 3: "Dynamic Evolution"
  - Icon: Rotate/cycle icon
  - Text: "Projects rotate as priorities shift. Completed projects make room for new ones."

**Current Projects Section:**
- Heading: "Current Focus" (h2)
- Subheading: "Our active projects, ordered by priority"
- Component: <ProjectGrid projects={projects} />
  - Display all returned projects from Firestore
  - Grid: 2 columns on tablet, 1 on mobile
  - Each project uses ProjectCard component

**Project Display Order:**
- Projects displayed in order of displayOrder field (1-5)
- If < 5 projects: show what exists, add note "More projects coming soon"
- If 0 projects: Show message "Projects launching soon. Check back or join our beta to get early access."

**Empty State (if no projects):**
- Illustration or icon
- Heading: "Projects Launching Soon"
- Description: "We're putting the final touches on our first Continuum projects. Join our beta program to get early access."
- CTA Button: "Join Beta Program" → /beta

**Bottom CTA Section:**
- Heading: "Want Early Access?"
- Description: "Join our beta program to be the first to experience Continuum projects as they launch."
- Two CTAs:
  - Primary: "Apply for Beta" → /beta
  - Secondary: "View All Solutions" → /solutions

3. **SEO Metadata:**
```typescript
export const metadata: Metadata = {
  title: 'The Continuum | ClearForge',
  description: 'Our top 5 focus projects with radical transparency. See real-time progress, metrics, and learnings from every initiative.',
  openGraph: {
    title: 'The Continuum | ClearForge',
    description: 'Our top 5 focus projects with radical transparency.',
    type: 'website',
  },
};
```

4. **Error Handling:**
- If Firestore query fails: Show cached version or fallback message
- Fallback message: "The Continuum projects are temporarily unavailable. Please check back soon."
- Log error for monitoring
- Don't crash page, show rest of content

**Validation:** 
- Shows exactly top 5 projects (or fewer if < 5 exist)
- Projects ordered by displayOrder
- Each project links to correct /continuum/{slug} page
- Updates within 15 minutes of Firestore changes
- Empty state displays correctly
- Mobile responsive
- All text content clear and compelling

---

### 2.5 Reusable Components

**Required Components:**

---

**File:** `/components/continuum/ProjectPhase.tsx` (NEW)

**Purpose:** Display phase badge with health indicator

**Props:**
```typescript
interface ProjectPhaseProps {
  phase: string; // "Phase 0 - Research", "Phase 1 - Launching", etc.
  health: 'healthy' | 'at-risk' | 'blocked';
  updatedAt?: Date;
}
```

**Visual Design:**
- Badge with rounded corners
- Phase text on left
- Health dot on right (8px circle)
- Colors:
  - healthy: green (#10b981)
  - at-risk: yellow (#f59e0b)
  - blocked: red (#ef4444)
- Typography: 14px, medium weight
- Background: dark gray with slight border
- Padding: 8px 16px

**Behavior:**
- Displays phase text exactly as provided
- Health dot pulses if at-risk or blocked
- Optional tooltip on hover showing last update time
- If updatedAt provided: "Last updated {relative time}"

**Accessibility:**
- aria-label describing health status
- Color not sole indicator (include text in tooltip)

---

**File:** `/components/continuum/LiveMetrics.tsx` (NEW)

**Purpose:** Display project metrics in responsive grid

**Props:**
```typescript
interface LiveMetricsProps {
  metrics: {
    partners?: number;
    revenue?: number;
    retentionRate?: number;
  };
  showEmptyState?: boolean; // Default: true
}
```

**Visual Design:**
- 3-column grid (desktop), 1-column (mobile)
- Each metric in a card:
  - Large number (primary metric)
  - Label below (secondary text)
  - Icon above (contextual)
- Card styling:
  - Background: subtle dark gray
  - Border: 1px solid darker gray
  - Padding: 24px
  - Rounded corners

**Metric Display:**
- Partners: Show as integer, icon: users
- Revenue: Format as currency ($0, $1.2K, $1.2M), icon: dollar sign
- Retention Rate: Format as percentage (95%), icon: trending up

**Empty State:**
- If all metrics null/undefined and showEmptyState=true:
  - Show single card: "Metrics will appear as project progresses"
  - Subtle gray background
  - Icon: chart/metrics icon
- If showEmptyState=false: Don't render component

**Behavior:**
- Animates number changes (count up animation)
- Tooltips on hover with metric explanation
- Responsive: stacks on mobile

---

**File:** `/components/continuum/LearningsFeed.tsx` (NEW)

**Purpose:** Display chronological list of project learnings

**Props:**
```typescript
interface LearningsFeedProps {
  learnings: Learning[];
  maxDisplay?: number; // Default: 10
  showEmpty?: boolean; // Default: true
}
```

**Visual Design:**
- Timeline/list layout
- Each learning item:
  - Content text (main content)
  - Timestamp (relative: "2 days ago", "3 weeks ago")
  - Optional type badge (learning, insight, blocker, win)
  - Optional tags (small pills)
- Left border accent line connecting items
- Fade effect on last item if more exist

**Learning Item Structure:**
- Content: 16px, regular weight, primary text color
- Timestamp: 14px, lighter color, below content
- Type badge: Small colored pill (different color per type)
  - learning: blue
  - insight: purple
  - blocker: red
  - win: green
- Tags: Small gray pills, 12px text

**Empty State:**
- If no learnings and showEmpty=true:
  - Message: "Learnings will appear as we progress"
  - Icon: lightbulb or book
  - Subtle styling

**Behavior:**
- Shows most recent {maxDisplay} learnings
- If more exist: "View all learnings →" link at bottom (future dashboard)
- Chronological order: newest first
- Smooth fade-in animation for new items
- Mobile responsive: full width

---

**File:** `/components/continuum/ProjectCard.tsx` (NEW)

**Purpose:** Card component for project display on Continuum landing

**Props:**
```typescript
interface ProjectCardProps {
  name: string;
  slug: string;
  phase: string;
  status: 'active' | 'paused' | 'completed' | 'archived';
  health: 'healthy' | 'at-risk' | 'blocked';
  description: string;
  displayOrder: number;
}
```

**Visual Design:**
- Card dimensions: Full width, aspect ratio maintained
- Layout:
  - Display order number (large, top left corner, subtle)
  - Project name (h3, bold)
  - Phase badge (using ProjectPhase component)
  - Description (2-3 lines, truncate with ellipsis)
  - Arrow icon (bottom right, indicates clickable)
- Styling:
  - Background: dark card background
  - Border: 1px solid, changes on hover
  - Padding: 32px
  - Rounded corners: 12px
  - Shadow: subtle, increases on hover

**Status Indicators:**
- Active: No additional indicator (default state)
- Paused: Yellow "Paused" badge
- Completed: Green checkmark icon
- Archived: Grayed out (should not display on landing)

**Behavior:**
- Entire card is clickable link to /continuum/{slug}
- Hover effects:
  - Border color brightens
  - Slight lift (transform: translateY(-4px))
  - Shadow increases
  - Arrow icon moves right slightly
- Smooth transitions (200ms)
- Focus state for keyboard navigation

**Accessibility:**
- Semantic HTML: article tag
- Proper heading hierarchy
- Link includes descriptive text for screen readers
- Focus visible outline

---

**File:** `/components/continuum/TransparencyLink.tsx` (NEW)

**Purpose:** Call-to-action button for full dashboard transparency

**Props:**
```typescript
interface TransparencyLinkProps {
  projectId: string;
  variant?: 'button' | 'link'; // Default: 'button'
  text?: string; // Default: 'See Full Transparency'
}
```

**Visual Design:**

**Button Variant:**
- Large button (16px padding vertical, 32px horizontal)
- Primary ClearForge brand color
- White text
- Right arrow icon
- Hover: slightly lighter background
- Typography: 16px, medium weight

**Link Variant:**
- Inline link with arrow
- Brand color text
- Underline on hover
- Typography: 16px, medium weight

**Behavior:**
- Links to /continuum/{projectId}/dashboard (future implementation)
- If dashboard not yet implemented: Links to /contact with note
- Smooth transition effects
- Opens in same tab (not new window)

**Future Implementation Note:**
- Once dashboard pages exist, update href logic
- For now, href="#" with onClick that shows "Coming soon" message
- Or link to /contact with pre-filled message about transparency

---

**File:** `/components/continuum/ProjectGrid.tsx` (NEW)

**Purpose:** Responsive grid container for project cards

**Props:**
```typescript
interface ProjectGridProps {
  projects: Project[];
  columns?: 1 | 2 | 3; // Default: 2
}
```

**Visual Design:**
- CSS Grid layout
- Gap between cards: 32px
- Responsive breakpoints:
  - Mobile (< 768px): 1 column
  - Tablet (768px - 1024px): 2 columns
  - Desktop (> 1024px): columns prop value
- Max width: 1200px (centered)

**Behavior:**
- Maps over projects array
- Renders ProjectCard for each
- Maintains aspect ratio on all screen sizes
- Smooth layout shifts if content changes

**Validation:** 
- All components render correctly with real Firestore data
- Handle missing optional props gracefully
- Mobile responsive on all components
- Accessibility standards met
- Loading states for async data
- Error boundaries for failed renders

---

### 2.6 API Endpoints (Optional Enhancement)

**File:** `/app/api/continuum/[slug]/status/route.ts` (NEW - OPTIONAL)

If client-side data fetching preferred:
- GET endpoint returning project status
- Response cached for 15 minutes
- Used by client components for real-time updates

---

### 2.7 Error Handling & Fallbacks

**Required Error Handling:**

1. **Firestore Connection Failure:**
   - Log error
   - Show fallback message: "Continuum projects temporarily unavailable"
   - Don't crash page

2. **Missing Project Data:**
   - Return 404 for invalid slugs
   - Validate required fields exist

3. **Slow Queries:**
   - Implement 10-second timeout
   - Show loading state
   - Graceful degradation

**File:** `/lib/firestore-client.ts`

Include retry logic (max 3 attempts) for transient failures.

---

## Testing Requirements

### Phase 1 Testing

**Pre-Deployment Testing (Local):**

1. **Beta Form Submission**
   - Test Case 1.1: Submit valid form
     - Fill all required fields correctly
     - Submit form
     - Expected: Success message, form clears
   - Test Case 1.2: Submit with missing required fields
     - Leave required fields empty
     - Submit form
     - Expected: Validation errors appear below fields
   - Test Case 1.3: Submit with invalid email
     - Enter invalid email format
     - Submit form
     - Expected: Email validation error
   - Test Case 1.4: Rate limiting
     - Submit form 6 times rapidly
     - Expected: 6th submission rejected with 429 error

2. **Contact Form Submission**
   - Test Case 2.1: Each inquiry type
     - Submit form for each of 6 inquiry types
     - Expected: All submit successfully
   - Test Case 2.2: Dynamic field display
     - Select Partnership inquiry type
     - Expected: Industry and Timeline fields appear
     - Change to General inquiry type
     - Expected: Industry and Timeline fields hide
   - Test Case 2.3: Validation per inquiry type
     - Submit Partnership without required fields
     - Expected: Industry and Timeline validation errors

3. **Port Configuration**
   - Test Case 3.1: Local Docker build
     - Build Docker image locally
     - Run container
     - Expected: Container runs on port 8080
   - Test Case 3.2: Health check
     - Request http://localhost:8080/api/health
     - Expected: 200 OK response

4. **Gateway API Integration**
   - Test Case 4.1: Beta submission to Gateway
     - Submit beta form with valid data
     - Expected: Gateway receives request, returns success
   - Test Case 4.2: Contact submission to Gateway
     - Submit contact form with valid data
     - Expected: Gateway receives request, returns success
   - Test Case 4.3: Gateway error handling
     - Simulate Gateway timeout (disconnect network)
     - Submit form
     - Expected: Retry logic kicks in, eventual error message to user

**Post-Deployment Testing (Production):**

1. **Public Access**
   - Test Case 1.1: Unauthenticated access
     - Visit Cloud Run URL without authentication
     - Expected: Homepage loads without login prompt
   - Test Case 1.2: IAM policy verification
     - Check Cloud Run IAM policy includes allUsers
     - Expected: roles/run.invoker granted to allUsers

2. **Domain Configuration**
   - Test Case 2.1: Apex domain
     - Visit https://clearforgetech.com
     - Expected: Redirects to https://www.clearforgetech.com
   - Test Case 2.2: WWW subdomain
     - Visit https://www.clearforgetech.com
     - Expected: Homepage loads
   - Test Case 2.3: SSL certificate
     - Check certificate validity
     - Expected: Valid SSL certificate, no warnings
   - Test Case 2.4: HTTP to HTTPS redirect
     - Visit http://www.clearforgetech.com
     - Expected: Redirects to https://www.clearforgetech.com
   - Test Case 2.5: DNS propagation
     - Use DNS checker tool
     - Expected: clearforgetech.com resolves to Cloud Run IP

3. **Form Submissions (End-to-End)**
   - Test Case 3.1: Beta form production submission
     - Submit beta form on production site
     - Check Gateway logs
     - Expected: Submission received in Gateway
   - Test Case 3.2: Contact form production submission
     - Submit contact form on production site
     - Check Gateway logs
     - Expected: Submission received in Gateway

4. **Performance**
   - Test Case 4.1: Page load time
     - Measure homepage load time
     - Expected: < 2 seconds
   - Test Case 4.2: Form submission time
     - Measure time from submit click to success message
     - Expected: < 3 seconds

**Success Criteria:** 
- All forms submit successfully on production
- Website publicly accessible at clearforgetech.com
- SSL valid
- No console errors
- Mobile responsive verified on real devices

---

### Phase 2 Testing

**Firestore Integration Testing:**

1. **Connection Tests**
   - Test Case 1.1: Firestore client initialization
     - Initialize FirestoreClient on server
     - Expected: Connection successful, no errors
   - Test Case 1.2: Service account permissions
     - Attempt to read /projects collection
     - Expected: Success
   - Test Case 1.3: Write permission (should fail)
     - Attempt to write to /projects collection
     - Expected: Permission denied error

2. **Query Tests**
   - Test Case 2.1: Get active projects
     - Query getActiveProjects()
     - Expected: Returns array of active projects only
   - Test Case 2.2: Get project by slug
     - Query getProjectBySlug('test-project')
     - Expected: Returns project if exists, null if not
   - Test Case 2.3: Get project learnings
     - Query getProjectLearnings('test-project-id')
     - Expected: Returns learnings array, ordered by capturedAt DESC
   - Test Case 2.4: Query with filters
     - Query getActiveProjects({ displayOnly: true })
     - Expected: Returns only projects where displayOnContinuum = true

**Dynamic Page Generation Testing:**

1. **Project Page Tests**
   - Test Case 1.1: Create test project in Firestore
     - Create project with slug 'test-project'
     - Set status: 'active', displayOnContinuum: true
     - Expected: Project appears in Firestore
   
   - Test Case 1.2: Page generation
     - Wait 15 minutes (ISR revalidation)
     - Visit /continuum/test-project
     - Expected: Page renders with project data
   
   - Test Case 1.3: Page content verification
     - Check page displays:
       - Project name in h1
       - Phase badge
       - Vision text
       - Current focus (if exists)
       - Metrics (if exist)
     - Expected: All sections present with correct data
   
   - Test Case 1.4: Invalid slug
     - Visit /continuum/non-existent-project
     - Expected: 404 page

   - Test Case 1.5: Inactive project
     - Create project with status: 'archived'
     - Visit /continuum/archived-project
     - Expected: 404 page

2. **Learnings Feed Tests**
   - Test Case 2.1: Add learning in Firestore
     - Add learning to /projects/{id}/learnings
     - Wait 15 minutes
     - Visit project page
     - Expected: Learning appears in feed
   
   - Test Case 2.2: Learning display order
     - Add 3 learnings with different timestamps
     - Visit project page
     - Expected: Learnings appear newest first
   
   - Test Case 2.3: Learning limit
     - Add 15 learnings
     - Visit project page
     - Expected: Only 10 most recent display
   
   - Test Case 2.4: Empty learnings
     - Create project with no learnings
     - Visit project page
     - Expected: Empty state message displayed

3. **Metrics Display Tests**
   - Test Case 3.1: Update metrics
     - Update project metrics in Firestore
     - Wait 15 minutes
     - Visit project page
     - Expected: Updated metrics display
   
   - Test Case 3.2: Partial metrics
     - Set only partners metric, leave others null
     - Visit project page
     - Expected: Only partners metric displays
   
   - Test Case 3.3: No metrics
     - Set all metrics to null
     - Visit project page
     - Expected: Metrics section doesn't display

**Continuum Landing Tests:**

1. **Project List Tests**
   - Test Case 1.1: Top 5 display
     - Create 7 active projects in Firestore
     - Set displayOrder 1-7
     - Visit /continuum
     - Expected: Only top 5 display (displayOrder 1-5)
   
   - Test Case 1.2: Project order
     - Verify projects display in displayOrder sequence
     - Expected: Order matches displayOrder field
   
   - Test Case 1.3: displayOnContinuum filter
     - Set project displayOnContinuum: false
     - Visit /continuum
     - Expected: Project doesn't appear
   
   - Test Case 1.4: Empty state
     - Set all projects to displayOnContinuum: false
     - Visit /continuum
     - Expected: Empty state message displays
   
   - Test Case 1.5: Fewer than 5 projects
     - Create only 3 active projects
     - Visit /continuum
     - Expected: Shows 3 projects, no empty slots

2. **Update Propagation Tests**
   - Test Case 2.1: Project phase change
     - Update project phase in Firestore
     - Wait 15 minutes
     - Visit /continuum and project page
     - Expected: Both pages show updated phase
   
   - Test Case 2.2: Health status change
     - Update project health to 'blocked'
     - Wait 15 minutes
     - Visit pages
     - Expected: Health indicator changes to red
   
   - Test Case 2.3: displayOrder change
     - Swap displayOrder of projects 1 and 2
     - Wait 15 minutes
     - Visit /continuum
     - Expected: Project order updates

**Error Handling Tests:**

1. **Firestore Failures**
   - Test Case 1.1: Connection failure
     - Simulate Firestore unavailable
     - Visit /continuum
     - Expected: Fallback message displays, page doesn't crash
   
   - Test Case 1.2: Timeout
     - Simulate slow Firestore query (>10 seconds)
     - Visit project page
     - Expected: Timeout error, fallback message
   
   - Test Case 1.3: Partial data
     - Create project missing required fields
     - Visit project page
     - Expected: Page handles gracefully, missing sections hidden

2. **Component Error Boundaries**
   - Test Case 2.1: Component render failure
     - Cause component to throw error
     - Expected: Error boundary catches, shows fallback UI
   
   - Test Case 2.2: Invalid data types
     - Pass invalid props to components
     - Expected: Components handle gracefully or error boundary catches

**Performance Tests:**

1. **Load Time Tests**
   - Test Case 1.1: Initial page load
     - Visit /continuum (cold start)
     - Expected: < 2 seconds
   
   - Test Case 1.2: Cached page load
     - Visit /continuum (ISR cached)
     - Expected: < 500ms
   
   - Test Case 1.3: Project page load
     - Visit /continuum/nexus
     - Expected: < 2 seconds

2. **Firestore Query Performance**
   - Test Case 2.1: Query response time
     - Measure getActiveProjects() time
     - Expected: < 1 second
   
   - Test Case 2.2: Large dataset
     - Query project with 100+ learnings
     - Expected: < 2 seconds
   
   - Test Case 2.3: Cache effectiveness
     - Make same query twice
     - Expected: Second query uses cache, < 100ms

**Mobile Responsiveness Tests:**

1. **Layout Tests** (Test on iPhone, Android)
   - Test Case 1.1: Continuum landing
     - Visit /continuum on mobile
     - Expected: Project cards stack vertically, readable
   
   - Test Case 1.2: Project page
     - Visit project page on mobile
     - Expected: All sections readable, no horizontal scroll
   
   - Test Case 1.3: Component responsiveness
     - Check all components on mobile
     - Expected: LiveMetrics stacks, LearningsFeed full width

**Accessibility Tests:**

1. **Screen Reader Tests**
   - Test Case 1.1: Project cards
     - Navigate project cards with screen reader
     - Expected: Proper announcements, clear navigation
   
   - Test Case 1.2: Phase badges
     - Focus phase badge
     - Expected: Health status announced

2. **Keyboard Navigation Tests**
   - Test Case 2.1: Tab navigation
     - Navigate /continuum with keyboard only
     - Expected: All interactive elements reachable
   
   - Test Case 2.2: Focus indicators
     - Tab through page
     - Expected: Clear focus outlines on all elements

**Success Criteria Phase 2:**
- Website automatically detects projects created in XynergyOS
- Pages render with real-time data (15-min delay acceptable)
- All CRUD operations in Firestore reflect correctly on website
- No manual page creation needed
- Error handling graceful, no crashes
- Mobile responsive verified
- Accessibility standards met (WCAG 2.1 AA)
- Performance targets met (< 2s page load)

---

## Deployment Process

### Phase 1 Deployment

1. Commit all code changes to `master` branch
2. Cloud Build automatically triggers
3. Verify build succeeds
4. Verify deployment to Cloud Run
5. Test at Cloud Run URL
6. Configure domain mapping
7. Verify DNS propagation (24-48 hours)
8. Test at clearforgetech.com

### Phase 2 Deployment

1. Set up Firestore service account
2. Add credentials to Cloud Run secrets
3. Update environment variables
4. Deploy code changes
5. Create test project in XynergyOS
6. Verify end-to-end functionality
7. Monitor logs for errors

---

## Environment Variables Checklist

**Required for Launch (Phase 1):**
```env
NODE_ENV=production
NEXT_PUBLIC_APP_URL=https://www.clearforgetech.com
NEXT_PUBLIC_ENVIRONMENT=production
NEXT_PUBLIC_GATEWAY_URL=[from secret]
GATEWAY_API_KEY=[from secret]
NEXT_PUBLIC_GA_MEASUREMENT_ID=[from secret]
NEXT_TELEMETRY_DISABLED=1
```

**Required for Continuum (Phase 2):**
```env
FIRESTORE_PROJECT_ID=xynergy-dev-1757909467
GOOGLE_APPLICATION_CREDENTIALS=[from secret]
```

---

## Security Considerations

1. **Firestore Access:**
   - Service account with minimal permissions (read-only)
   - No write access from website
   - Credentials stored in Secret Manager
   - Service account key rotation every 90 days
   - Audit logging enabled on service account usage

2. **Rate Limiting:**
   - Existing rate limiter maintained (5 requests/minute per IP)
   - Apply to all form submissions
   - Consider Redis upgrade for distributed rate limiting (post-launch)
   - Monitor rate limit hits, adjust if legitimate users affected

3. **Content Security Policy:**
   - Add CSP headers in next.config.js:
     ```
     Content-Security-Policy: default-src 'self'; 
       script-src 'self' 'unsafe-eval' 'unsafe-inline' https://www.googletagmanager.com; 
       style-src 'self' 'unsafe-inline'; 
       img-src 'self' data: https:; 
       font-src 'self' data:; 
       connect-src 'self' https://www.google-analytics.com;
     ```
   - Test CSP doesn't break functionality

4. **Input Validation:**
   - Maintain Zod validation on all API routes
   - Sanitize all user input before storage
   - Prevent XSS through React's built-in escaping
   - Validate Firestore data on read (don't trust database)

5. **API Security:**
   - Gateway API key server-side only (GATEWAY_API_KEY)
   - Never expose in client-side code
   - Rotate API keys quarterly
   - Monitor for unauthorized access attempts

6. **HTTPS Enforcement:**
   - HSTS headers already configured
   - Force HTTPS redirects at Cloud Run level
   - SSL certificate auto-renewed by Google

7. **Firestore Security Rules (XynergyOS Side):**
   - Website service account can only read specific collections
   - No delete permissions
   - No write permissions
   - Audit all access from website service account

8. **DDoS Protection:**
   - Cloud Run auto-scaling provides some protection
   - Consider Cloudflare proxy for additional layer
   - Monitor for unusual traffic patterns
   - Set max instances limit (currently 10)

9. **Dependency Security:**
   - Run npm audit regularly
   - Keep dependencies updated
   - Review security advisories for Next.js, React
   - Automated Dependabot alerts enabled

10. **Error Handling:**
    - Never expose stack traces to users
    - Log detailed errors server-side only
    - Generic error messages to users
    - Implement error tracking (Sentry recommended)

**Security Review Checklist:**
- [ ] Service account permissions verified (read-only)
- [ ] CSP headers implemented and tested
- [ ] Rate limiting tested under load
- [ ] All secrets in Secret Manager (not hardcoded)
- [ ] Error messages don't leak sensitive info
- [ ] npm audit shows no critical vulnerabilities
- [ ] HTTPS enforced on all routes
- [ ] API keys rotated and documented

---

## Monitoring & Observability

### Required Monitoring Setup

**1. Cloud Logging (GCP):**
   - Enable structured logging
   - Log levels: ERROR, WARN, INFO
   - Include correlation IDs for request tracing
   - Retention: 30 days minimum

**Key Events to Log:**
- All form submissions (success/failure)
- Firestore query successes/failures
- Rate limit hits
- Gateway API call results
- 404 errors (track invalid slugs)
- 500 errors (application errors)

**2. Cloud Monitoring (GCP):**
   - Set up dashboards for:
     - Request rate (requests/second)
     - Response times (p50, p95, p99)
     - Error rates (4xx, 5xx)
     - Container CPU and memory usage
     - Firestore query latency

**3. Uptime Monitoring:**
   - Configure uptime checks for:
     - Homepage (/)
     - API health endpoint (/api/health)
     - Sample project page (/continuum/nexus)
   - Frequency: Every 5 minutes
   - Alert on 2 consecutive failures

**4. Alerting Rules:**

**Critical Alerts** (Page immediately):
- 5xx error rate > 5% over 5 minutes
- API health check fails
- Container crashes
- SSL certificate expiring in < 7 days

**Warning Alerts** (Email):
- 4xx error rate > 10% over 10 minutes
- Response time p95 > 3 seconds
- Firestore query failures > 5% over 10 minutes
- Rate limit hits spike (>100 in 5 minutes)
- Memory usage > 80%

**5. Error Tracking (Recommended: Sentry):**
   - Capture unhandled exceptions
   - Track error trends over time
   - Source maps for stack traces
   - User context in error reports
   - Release tracking

**Setup Instructions:**
```env
# Add to .env
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
SENTRY_ENVIRONMENT=production
```

**6. Performance Monitoring:**
   - Google Analytics 4 for user metrics
   - Core Web Vitals tracking (already implemented)
   - Page load times by route
   - Form submission success rates

**7. Firestore Monitoring (XynergyOS Side):**
   - Monitor read operations from website
   - Track query performance
   - Alert on quota limits
   - Watch for suspicious access patterns

**Monitoring Dashboard Checklist:**
- [ ] Cloud Logging configured and accessible
- [ ] Cloud Monitoring dashboards created
- [ ] Uptime checks configured
- [ ] Alert policies created and tested
- [ ] Team has access to monitoring tools
- [ ] On-call rotation established for critical alerts
- [ ] Runbook created for common issues

---

## Implementation Timeline

### Week 1: Phase 1 Execution (Blockers)

**Day 1: Technical Fixes (4 hours)**

**Morning (2 hours):**
- 8:00 AM: Beta form schema alignment
  - Update field names in BetaApplicationForm.tsx
  - Test form validation locally
  - Verify API schema match
- 9:30 AM: Port configuration fix
  - Update cloudbuild.yaml port to 8080
  - Build Docker image locally
  - Test container on port 8080
- 10:00 AM: Gateway environment setup
  - Create secrets in Secret Manager
  - Update cloudbuild.yaml secret references
  - Verify secret access permissions

**Afternoon (2 hours):**
- 1:00 PM: Deploy to Cloud Run
  - Push code changes to master
  - Monitor Cloud Build
  - Verify deployment success
- 2:00 PM: Configure public access
  - Update IAM policy
  - Test unauthenticated access
  - Verify homepage loads
- 2:30 PM: End-to-end testing
  - Test beta form submission
  - Test API health endpoint
  - Check Cloud Run logs

**Day 2: Contact Form & Domain (4 hours)**

**Morning (2 hours):**
- 8:00 AM: Create ContactForm component
  - Implement form with all fields
  - Add validation logic
  - Style to match existing forms
- 10:00 AM: Update contact page
  - Add 6 contact option cards
  - Integrate ContactForm
  - Test all inquiry types

**Afternoon (2 hours):**
- 1:00 PM: Domain configuration
  - Update GoDaddy DNS records
  - Create domain mappings in GCP
  - Update NEXT_PUBLIC_APP_URL
  - Redeploy application
- 2:00 PM: SSL and final testing
  - Wait for SSL provisioning
  - Test domain access
  - Verify HTTPS redirect
  - Complete manual test checklist

**End of Day 2:** Website live at clearforgetech.com with working forms

---

### Week 2: Testing & Stabilization

**Day 3: Comprehensive Testing (4 hours)**
- Run full Phase 1 test suite
- Test on multiple devices/browsers
- Fix any issues discovered
- Update documentation

**Day 4: Monitoring Setup (4 hours)**
- Configure Cloud Logging
- Create monitoring dashboards
- Set up uptime checks
- Create alert policies
- Test alerting

**Day 5: Buffer & Documentation (4 hours)**
- Address any bugs from testing
- Update README with production URLs
- Document deployment process
- Create runbook for common issues
- Knowledge transfer to team

---

### Week 3-4: Phase 2 Preparation

**Week 3: Firestore Integration (16 hours)**

**Days 6-7: Setup & Client (8 hours)**
- Create service account in GCP
- Configure permissions
- Implement FirestoreClient class
- Add caching layer
- Write unit tests
- Test connection to XynergyOS Firestore

**Days 8-9: Schema & Testing (8 hours)**
- Document Firestore schema requirements
- Create test data in Firestore
- Test query methods
- Validate error handling
- Performance testing

**Week 4: Dynamic Pages (16 hours)**

**Days 10-11: Components (8 hours)**
- Build ProjectPhase component
- Build LiveMetrics component
- Build LearningsFeed component
- Build ProjectCard component
- Build TransparencyLink component
- Build ProjectGrid component
- Test all components with mock data

**Days 12-13: Routes & Integration (8 hours)**
- Implement /continuum/[slug]/page.tsx
- Update /continuum/page.tsx
- Add loading and error states
- Integrate all components
- SEO metadata
- ISR configuration

**Day 14: Testing & Launch (8 hours)**
- Create test project in Firestore
- Verify page generation
- Run full Phase 2 test suite
- Fix any issues
- Deploy to production
- Monitor for 24 hours

---

### Post-Launch: Ongoing Maintenance

**Weekly Tasks:**
- Review error logs
- Check monitoring dashboards
- Test critical paths
- Update dependencies (as needed)

**Monthly Tasks:**
- Review security vulnerabilities
- Update documentation
- Performance audit
- Backup validation

**Quarterly Tasks:**
- Rotate API keys
- Rotate service account keys
- Full security audit
- Dependency major version updates

---

## Rollback Plan

### Phase 1 Rollback

**If critical issues discovered post-launch:**

1. **Immediate Rollback (< 5 minutes):**
   ```bash
   # Revert to previous Cloud Run revision
   gcloud run services update-traffic clearforge-website \
     --to-revisions=PREVIOUS_REVISION=100 \
     --region=us-central1
   ```

2. **Code Rollback:**
   - Revert git commits
   - Redeploy previous working version

3. **DNS Rollback (if domain issues):**
   - Remove domain mapping
   - Point domain to previous hosting
   - Takes 24-48 hours to propagate

**Rollback Triggers:**
- Forms not submitting (> 50% failure rate)
- Site inaccessible to public
- Critical security vulnerability discovered
- Data corruption/loss

### Phase 2 Rollback

**If Firestore integration causes issues:**

1. **Feature Flag Disable:**
   - Set environment variable: ENABLE_CONTINUUM_DYNAMIC=false
   - Redeploy
   - Falls back to static Continuum page

2. **Component Rollback:**
   - Remove dynamic routes
   - Restore static placeholder pages
   - Redeploy

3. **Firestore Disconnect:**
   - Remove Firestore credentials
   - Disable Firestore client
   - Error boundaries prevent crashes

**Rollback Triggers:**
- Firestore queries failing > 10%
- Page load times > 5 seconds
- Memory/CPU issues from Firestore calls
- Unexpected cost increase

**Rollback Testing:**
- Test rollback procedure in staging environment
- Document rollback steps in runbook
- Practice rollback with team (fire drill)

---

## Success Metrics

### Phase 1 Success Criteria

**Technical Metrics:**
- ✅ Website loads at clearforgetech.com
- ✅ All forms submit successfully (> 95% success rate)
- ✅ Page load time < 2 seconds (p95)
- ✅ Zero critical errors in first 24 hours
- ✅ Uptime > 99.9% in first week

**Business Metrics:**
- ✅ Beta form submissions > 0 in first week
- ✅ Contact form submissions > 0 in first week
- ✅ No spam/bot submissions getting through
- ✅ Response time to inquiries < 24 hours

### Phase 2 Success Criteria

**Technical Metrics:**
- ✅ Projects auto-detect from Firestore
- ✅ Page generation within 15 minutes of Firestore changes
- ✅ Firestore query success rate > 95%
- ✅ No manual page creation needed
- ✅ Performance maintained (< 2 second load times)

**User Experience Metrics:**
- ✅ Users can navigate to project pages from landing
- ✅ All project data displays correctly
- ✅ Learnings appear automatically
- ✅ Mobile experience is seamless
- ✅ No broken links or 404s on valid projects

**Operational Metrics:**
- ✅ Zero manual deployments for new projects
- ✅ Content updates reflected automatically
- ✅ Error rate < 1%
- ✅ Firestore costs within budget

---

## Dependencies & Prerequisites

### External Dependencies

**Phase 1:**
1. GoDaddy domain access (DNS management)
2. Intelligence Gateway deployed and operational
3. Gateway API key provided
4. GCP project access (xynergy-dev-1757909467)
5. Cloud Run service account with necessary permissions
6. Google Analytics measurement ID (optional but recommended)

**Phase 2:**
1. XynergyOS Firestore database operational
2. Firestore schema implemented in XynergyOS
3. Service account created with read-only access
4. Test data available in Firestore
5. Living Memory capturing learnings (optional initially)

### Team Prerequisites

**Required Access:**
- GCP Console (Cloud Run, Secret Manager, Cloud Build)
- GoDaddy account
- GitHub repository (cloudforge-website)
- Intelligence Gateway admin panel
- XynergyOS Firestore console

**Required Knowledge:**
- Next.js deployment
- Cloud Run configuration
- DNS configuration
- Firestore queries
- Git/GitHub workflows

---

## Risks & Mitigation

### Phase 1 Risks

**Risk 1: DNS propagation delays**
- Impact: High (site inaccessible during transition)
- Probability: Medium
- Mitigation: Plan launch for low-traffic period, communicate expected downtime
- Fallback: Use Cloud Run URL temporarily

**Risk 2: Gateway API unavailable**
- Impact: High (forms won't work)
- Probability: Low
- Mitigation: Test Gateway thoroughly before launch, implement retry logic
- Fallback: Collect form submissions in Firestore, process later

**Risk 3: Rate limiting too aggressive**
- Impact: Medium (legitimate users blocked)
- Probability: Medium
- Mitigation: Monitor rate limit hits closely, adjust limits quickly
- Fallback: Temporarily disable or increase limits

### Phase 2 Risks

**Risk 1: Firestore query performance issues**
- Impact: High (slow page loads)
- Probability: Medium
- Mitigation: Implement caching, query optimization, load testing
- Fallback: Increase cache duration, reduce query complexity

**Risk 2: Firestore costs exceed budget**
- Impact: Medium (unexpected costs)
- Probability: Low
- Mitigation: Monitor read operations, implement daily budgets, optimize queries
- Fallback: Reduce query frequency, increase cache duration

**Risk 3: XynergyOS Firestore schema changes**
- Impact: High (website breaks)
- Probability: Low
- Mitigation: Version schema, coordinate changes, test thoroughly
- Fallback: Schema validation layer, graceful degradation

**Risk 4: ISR invalidation issues**
- Impact: Medium (stale content displayed)
- Probability: Medium
- Mitigation: Test revalidation thoroughly, implement manual invalidation endpoint
- Fallback: Reduce revalidation time, manual cache clears

---

## Post-Launch Checklist

### Immediate Post-Launch (First 24 Hours)

- [ ] Monitor error rates every hour
- [ ] Test all forms multiple times
- [ ] Check analytics data flowing
- [ ] Verify DNS fully propagated
- [ ] Test on mobile devices
- [ ] Check SSL certificate valid
- [ ] Monitor response times
- [ ] Review Cloud Run logs for errors
- [ ] Test from different geographic locations
- [ ] Verify Gateway receiving submissions

### First Week

- [ ] Daily log reviews
- [ ] Monitor form submission rates
- [ ] Check for spam/bot submissions
- [ ] Respond to all inquiries < 24 hours
- [ ] Address any user-reported issues
- [ ] Update documentation based on learnings
- [ ] Performance analysis
- [ ] Cost analysis (Cloud Run, Firestore)

### First Month

- [ ] Full security audit
- [ ] Performance optimization review
- [ ] User feedback collection
- [ ] Analytics deep dive
- [ ] Documentation completion
- [ ] Team knowledge transfer complete
- [ ] Monitoring/alerting tuned
- [ ] Runbook validated through real issues

---

## Appendix

### A. Critical File Changes Summary

**Files to Modify:**
1. `/components/forms/BetaApplicationForm.tsx` - Update field names
2. `/cloudbuild.yaml` - Change port from 3000 to 8080
3. `.env` - Add Firestore environment variables

**Files to Create:**
1. `/lib/firestore-client.ts` - Firestore integration
2. `/components/forms/ContactForm.tsx` - Contact form
3. `/app/continuum/[slug]/page.tsx` - Dynamic project pages
4. `/components/continuum/ProjectPhase.tsx` - Phase badge component
5. `/components/continuum/LiveMetrics.tsx` - Metrics display
6. `/components/continuum/LearningsFeed.tsx` - Learnings list
7. `/components/continuum/ProjectCard.tsx` - Project card
8. `/components/continuum/TransparencyLink.tsx` - Dashboard link
9. `/components/continuum/ProjectGrid.tsx` - Grid container

**Files to Update:**
1. `/app/continuum/page.tsx` - Fetch from Firestore
2. `/app/contact/page.tsx` - Add ContactForm
3. `/next.config.js` - Add CSP headers (optional)
4. `.env.example` - Document new variables

### B. Environment Variables Reference

**Production Environment Variables:**
```bash
# Application
NODE_ENV=production
NEXT_PUBLIC_APP_URL=https://www.clearforgetech.com
NEXT_PUBLIC_ENVIRONMENT=production
NEXT_TELEMETRY_DISABLED=1

# Intelligence Gateway
NEXT_PUBLIC_GATEWAY_URL=https://intelligence-gateway-[hash]-uc.a.run.app
GATEWAY_API_KEY=[secret:gateway-api-key:latest]

# Analytics
NEXT_PUBLIC_GA_MEASUREMENT_ID=[secret:ga-measurement-id:latest]
NEXT_PUBLIC_GTM_ID=GTM-XXXXXXX

# Firestore (Phase 2)
FIRESTORE_PROJECT_ID=xynergy-dev-1757909467
GOOGLE_APPLICATION_CREDENTIALS=/secrets/firestore-credentials.json

# Feature Flags (Phase 2)
NEXT_PUBLIC_ENABLE_CONTINUUM_DYNAMIC=true

# GCP Configuration
GOOGLE_CLOUD_PROJECT_ID=xynergy-dev-1757909467
GOOGLE_CLOUD_REGION=us-central1
```

### C. DNS Configuration Details

**GoDaddy DNS Records:**

```
Type: CNAME
Name: www
Value: ghs.googlehosted.com
TTL: 600 seconds

Type: A
Name: @
Value: [Cloud Run IP - obtain from GCP]
TTL: 600 seconds
```

**Verification:**
```bash
# Check DNS propagation
dig clearforgetech.com
dig www.clearforgetech.com

# Check from multiple locations
nslookup clearforgetech.com 8.8.8.8
```

### D. GCP Commands Reference

**Secret Management:**
```bash
# Create secrets
echo -n "your-gateway-url" | gcloud secrets create gateway-url \
  --data-file=- \
  --project=xynergy-dev-1757909467

echo -n "your-api-key" | gcloud secrets create gateway-api-key \
  --data-file=- \
  --project=xynergy-dev-1757909467

# List secrets
gcloud secrets list --project=xynergy-dev-1757909467

# View secret versions
gcloud secrets versions list gateway-url
```

**Cloud Run Management:**
```bash
# Deploy
gcloud builds submit --config cloudbuild.yaml

# Update traffic (rollback)
gcloud run services update-traffic clearforge-website \
  --to-revisions=clearforge-website-00001-xyz=100 \
  --region=us-central1 \
  --project=xynergy-dev-1757909467

# View logs
gcloud run services logs read clearforge-website \
  --region=us-central1 \
  --limit=100

# Describe service
gcloud run services describe clearforge-website \
  --region=us-central1 \
  --project=xynergy-dev-1757909467

# Make service public
gcloud run services add-iam-policy-binding clearforge-website \
  --region=us-central1 \
  --member="allUsers" \
  --role="roles/run.invoker" \
  --project=xynergy-dev-1757909467
```

**Domain Mapping:**
```bash
# Create domain mappings
gcloud run domain-mappings create \
  --service clearforge-website \
  --domain www.clearforgetech.com \
  --region us-central1 \
  --project=xynergy-dev-1757909467

gcloud run domain-mappings create \
  --service clearforge-website \
  --domain clearforgetech.com \
  --region us-central1 \
  --project=xynergy-dev-1757909467

# List domain mappings
gcloud run domain-mappings list \
  --region=us-central1 \
  --project=xynergy-dev-1757909467

# Describe domain mapping
gcloud run domain-mappings describe www.clearforgetech.com \
  --region=us-central1 \
  --project=xynergy-dev-1757909467
```

**Service Account (Phase 2):**
```bash
# Create service account
gcloud iam service-accounts create clearforge-website-firestore \
  --display-name="ClearForge Website Firestore Reader" \
  --project=xynergy-dev-1757909467

# Grant Firestore viewer role
gcloud projects add-iam-policy-binding xynergy-dev-1757909467 \
  --member="serviceAccount:clearforge-website-firestore@xynergy-dev-1757909467.iam.gserviceaccount.com" \
  --role="roles/datastore.viewer"

# Create key
gcloud iam service-accounts keys create firestore-key.json \
  --iam-account=clearforge-website-firestore@xynergy-dev-1757909467.iam.gserviceaccount.com

# Upload to Secret Manager
gcloud secrets create firestore-credentials \
  --data-file=firestore-key.json \
  --project=xynergy-dev-1757909467

# Grant Cloud Run access to secret
gcloud secrets add-iam-policy-binding firestore-credentials \
  --member="serviceAccount:PROJECT_NUMBER-compute@developer.gserviceaccount.com" \
  --role="roles/secretmanager.secretAccessor" \
  --project=xynergy-dev-1757909467
```

### E. Testing Commands

**Local Testing:**
```bash
# Install dependencies
npm install

# Build Docker image
docker build -t clearforge-website .

# Run container
docker run -p 8080:8080 clearforge-website

# Test endpoints
curl http://localhost:8080
curl http://localhost:8080/api/health
curl http://localhost:8080/continuum

# Run with environment variables
docker run -p 8080:8080 \
  -e NEXT_PUBLIC_GATEWAY_URL=https://... \
  -e GATEWAY_API_KEY=... \
  clearforge-website
```

**Production Testing:**
```bash
# Test domain
curl -I https://www.clearforgetech.com
curl -I https://clearforgetech.com

# Test forms (POST)
curl -X POST https://www.clearforgetech.com/api/beta \
  -H "Content-Type: application/json" \
  -d '{"company_name":"Test","contact_name":"Tester","email":"test@test.com"}'

# Check SSL
openssl s_client -connect www.clearforgetech.com:443 -servername www.clearforgetech.com

# DNS lookup
nslookup clearforgetech.com
```

### F. Monitoring Query Examples

**Cloud Logging Queries:**

```
# View all errors
resource.type="cloud_run_revision"
resource.labels.service_name="clearforge-website"
severity>=ERROR

# Form submissions
resource.type="cloud_run_revision"
resource.labels.service_name="clearforge-website"
jsonPayload.message=~"Form submitted"

# Rate limit hits
resource.type="cloud_run_revision"
resource.labels.service_name="clearforge-website"
jsonPayload.message=~"Rate limit"

# Firestore queries (Phase 2)
resource.type="cloud_run_revision"
resource.labels.service_name="clearforge-website"
jsonPayload.message=~"Firestore query"

# 404 errors
resource.type="cloud_run_revision"
resource.labels.service_name="clearforge-website"
httpRequest.status=404
```

**Monitoring Dashboards (MQL):**

```
# Request rate
fetch cloud_run_revision
| metric 'run.googleapis.com/request_count'
| group_by 1m, [value_request_count_mean: mean(value.request_count)]
| every 1m

# Response time
fetch cloud_run_revision
| metric 'run.googleapis.com/request_latencies'
| group_by 1m, [value_request_latencies_mean: mean(value.request_latencies)]
| every 1m

# Error rate
fetch cloud_run_revision
| metric 'run.googleapis.com/request_count'
| filter (metric.response_code_class == '5xx')
| group_by 1m, [value_request_count_sum: sum(value.request_count)]
| every 1m
```

### G. Common Issues & Solutions

**Issue 1: Forms not submitting**
- **Symptoms:** Form submission fails with validation error
- **Cause:** Field names don't match API schema
- **Solution:** Verify field names in form match Zod schema exactly
- **Prevention:** Add integration tests for form submission

**Issue 2: Port mismatch error**
- **Symptoms:** Cloud Run shows "Connection refused" or doesn't receive traffic
- **Cause:** Port configured in Cloud Run doesn't match Dockerfile EXPOSE
- **Solution:** Ensure cloudbuild.yaml --port matches Dockerfile EXPOSE (8080)
- **Prevention:** Add port to automated tests

**Issue 3: Gateway timeout**
- **Symptoms:** Form submission hangs then times out
- **Cause:** Gateway URL incorrect or Gateway down
- **Solution:** Verify GATEWAY_URL secret value, check Gateway health
- **Prevention:** Add Gateway health check before form submission

**Issue 4: DNS not resolving**
- **Symptoms:** Domain doesn't resolve to Cloud Run
- **Cause:** DNS propagation delay or incorrect records
- **Solution:** Wait 24-48 hours, verify GoDaddy records match documentation
- **Prevention:** Configure DNS before launch day

**Issue 5: Firestore connection fails (Phase 2)**
- **Symptoms:** Cannot read projects, error in logs
- **Cause:** Service account permissions or credentials issue
- **Solution:** Verify service account has datastore.viewer role, check secret mounted correctly
- **Prevention:** Test Firestore connection before deploying

**Issue 6: Stale content (Phase 2)**
- **Symptoms:** Changes in Firestore don't appear on website
- **Cause:** ISR cache not revalidating
- **Solution:** Wait full revalidation period (15 min) or manually trigger rebuild
- **Prevention:** Reduce revalidation time during testing, add manual invalidation endpoint

### H. Contact Information

**Technical Support:**
- Primary: [Your Email]
- Secondary: [Team Email]
- Emergency: [Phone Number]

**Service Owners:**
- Cloud Run: [Team/Person]
- Domain: [Person with GoDaddy access]
- Firestore: [XynergyOS Team]
- Gateway: [Gateway Team/Person]

**Escalation Path:**
1. On-call engineer (immediate response)
2. Tech lead (within 1 hour)
3. CTO (critical issues only)

### I. Glossary

- **ISR:** Incremental Static Regeneration - Next.js feature for revalidating static pages
- **CSP:** Content Security Policy - HTTP header for XSS protection
- **HSTS:** HTTP Strict Transport Security - Force HTTPS
- **IAM:** Identity and Access Management - GCP permissions system
- **Cloud Run:** GCP serverless container platform
- **Firestore:** GCP NoSQL document database
- **Gateway:** Intelligence Gateway - Backend API service
- **Service Account:** GCP identity for applications (non-human)
- **Secret Manager:** GCP service for storing secrets securely
- **Living Memory:** XynergyOS feature for capturing learnings
- **The Continuum:** ClearForge's top 5 focus projects system

---

## Document Control

**Version:** 1.0  
**Date:** October 15, 2025  
**Author:** Claude (Technical Requirements)  
**Approved By:** [Pending]  
**Next Review:** After Phase 1 completion  

**Change Log:**
- v1.0 (2025-10-15): Initial TRD creation

**Distribution:**
- Development Team
- Operations Team
- Product Owner
- CTO

---

**END OF DOCUMENT**